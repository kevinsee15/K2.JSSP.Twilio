{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nconst SMSObjectName = \"SMS\";\nconst SMSDisplayName = \"SMS\";\nconst SMSDescription = \"Interact with Twilio's Programmable SMS API.\";\n\nconst SMSMethodSendSMS = \"sendSMS\";\n\nconst SMSPropertyTo = \"to\";\nconst SMSPropertyFrom = \"from\";\nconst SMSPropertyBody = \"body\";\nconst SMSPropertyMediaUrl = \"mediaUrl\";\nconst SMSPropertyStatus = \"status\";\n\nlet _smsAccountId: string;\nlet _smsDefaultFrom: string;\n\nmetadata = {\n    systemName: \"twilio.javascriptbroker.k2nexus\",\n    displayName: \"Twilio Javascript Broker\",\n    description: \"A JSSP based Twilio connector for K2 Nexus.\",\n    configuration: {\n        \"Account ID\": {\n            \"displayName\": \"Account Id\",\n            \"type\": \"string\",\n            \"required\": true\n        },\n        \"Default From\": {\n            \"displayName\": \"Default 'From' Phone Number\",\n            \"type\": \"string\"\n        }\n    }\n};\n\nondescribe = async function({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            [SMSObjectName]: {\n                displayName: SMSDisplayName,\n                description: SMSDescription,\n                properties: {\n                    [SMSPropertyTo]: {\n                        displayName: \"To\",\n                        type: \"string\"\n                    },\n                    [SMSPropertyFrom]: {\n                        displayName: \"From\",\n                        type: \"string\"\n                    },\n                    [SMSPropertyBody]: {\n                        displayName: \"Body\",\n                        type: \"string\"\n                    },\n                    [SMSPropertyMediaUrl]: {\n                        displayName: \"Media URL\",\n                        type: \"string\"\n                    },\n                    [SMSPropertyStatus]: {\n                        displayName: \"Status\",\n                        type: \"string\"\n                    }\n                },\n                methods: {\n                    [SMSMethodSendSMS]: {\n                        displayName: \"Send SMS\",\n                        type: \"execute\",\n                        inputs: [SMSPropertyTo, SMSPropertyFrom, SMSPropertyBody, SMSPropertyMediaUrl],\n                        requiredInputs: [SMSPropertyTo, SMSPropertyBody],\n                        outputs: [SMSPropertyStatus]\n                    }\n                }\n            }\n        }\n    });\n}\n\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\n    _smsAccountId = <string>configuration[\"Account ID\"];\n    _smsDefaultFrom = <string>configuration[\"Default From\"];\n\n    switch (objectName)\n    {\n        case SMSObjectName: \n            await onExecuteSMS(methodName, properties); \n            break;\n        default: \n            throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\nasync function onExecuteSMS(methodName: string, properties: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case SMSMethodSendSMS:\n            await onExecuteSMSSendSMS(properties);\n            break;\n    }\n}\n\nasync function onExecuteSMSSendSMS(properties: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        let useFromNumber:string = _getFromNumber(properties);\n        \n        var data : {[key: string]: string} = {\n            \"To\": <string> properties[SMSPropertyTo],\n            \"From\": useFromNumber,\n            \"Body\": <string> properties[SMSPropertyBody]\n        };\n\n        let url = \"https://api.twilio.com/2010-04-01/Accounts/\" + _smsAccountId + \"/Messages.json\";\n        \n        _executeXHRRequest(url, data, \"POST\", function(responseObj) {\n            postResult({\n                [SMSPropertyStatus]: responseObj[\"status\"]\n            });\n            resolve();\n        });\n    });\n}\n\nfunction _executeXHRRequest(url: string, data: {[key: string]: string}, requestType: string, cb) {\n    var xhr = new XMLHttpRequest();\n\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState !== 4)\n            return;\n        if (xhr.status == 201 || xhr.status == 200) {\n            var obj = JSON.parse(xhr.responseText);\n            if (typeof cb === 'function')\n                cb(obj);\n        }\n        else if (xhr.status == 400 || xhr.status == 404) {\n            var obj = JSON.parse(xhr.responseText);\n            throw new Error(obj.code + \": \" + obj.message + \". Data: \" + data);\n        }\n        else {\n            postResult({\n            });\n            var obj = JSON.parse(xhr.responseText);\n            throw new Error(obj.code + \": \" + obj.message + \". Data: \" + data);\n        }\n    };\n    \n    var body = _encodeQueryData(data);\n\n    xhr.open(requestType.toUpperCase(), url);\n    xhr.withCredentials = true;\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n    xhr.send(body);\n}\n\n/* Helpers */\nfunction _encodeQueryData(data: {[key: string]: string}) {\n    const ret = [];\n    for(let key in data){\n        let value = data[key];\n        ret.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n    return ret.join('&');\n}\n\nfunction _getFromNumber(properties: SingleRecord): string {\n    if(!properties[SMSPropertyFrom] && !_smsDefaultFrom) {\n        throw new Error(\"Missing 'From' contact number. Specify as a SmartObject property or Service Intance key.\");\n    }\n\n    if(properties[SMSPropertyFrom]) {\n        return <string>properties[SMSPropertyFrom];\n    } else {\n        return _smsDefaultFrom;\n    }\n}\n"],"names":["_smsAccountId","_smsDefaultFrom","metadata","systemName","displayName","description","configuration","ondescribe","async","postSchema","objects","properties","type","methods","inputs","requiredInputs","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","useFromNumber","Error","_getFromNumber","data","url","requestType","cb","xhr","XMLHttpRequest","onreadystatechange","readyState","status","obj","JSON","parse","responseText","code","message","postResult","body","ret","key","value","push","encodeURIComponent","join","_encodeQueryData","open","toUpperCase","withCredentials","setRequestHeader","send","_executeXHRRequest","responseObj","onExecuteSMSSendSMS","onExecuteSMS"],"mappings":"YAcA,IAAIA,EACAC,EAEJC,SAAW,CACPC,WAAY,kCACZC,YAAa,2BACbC,YAAa,8CACbC,cAAe,cACG,aACK,kBACP,mBACI,kBAEA,aACG,mCACP,YAKpBC,WAAaC,gBAAeF,cAACA,IACzBG,WAAW,CACPC,QAAS,KACY,CACbN,YAnCO,MAoCPC,YAnCO,+CAoCPM,WAAY,IACS,CACbP,YAAa,KACbQ,KAAM,eAES,CACfR,YAAa,OACbQ,KAAM,eAES,CACfR,YAAa,OACbQ,KAAM,mBAEa,CACnBR,YAAa,YACbQ,KAAM,iBAEW,CACjBR,YAAa,SACbQ,KAAM,WAGdC,QAAS,SACe,CAChBT,YAAa,WACbQ,KAAM,UACNE,OAAQ,CA1DV,KACE,OACA,OACI,YAwDJC,eAAgB,CA3DlB,KAEE,QA0DAC,QAAS,CAxDP,iBAgE1BC,UAAYT,gBAAeU,WAACA,EAADC,WAAaA,EAAbC,WAAyBA,EAAzBT,WAAqCA,EAArCL,cAAiDA,EAAjDe,OAAgEA,WACvFrB,EAAwBM,EAAc,cACtCL,EAA0BK,EAAc,gBAEhCY,OA9EU,YAuFtBV,eAA4BW,EAAoBR,UACpCQ,OApFa,gBA4FzBX,eAAmCG,UACxB,IAAIW,QAAc,CAACC,EAASC,SAE3BC,EA6DZ,SAAwBd,OAChBA,EAAU,OAAsBV,QAC1B,IAAIyB,MAAM,mGAGjBf,EAAU,KACMA,EAAU,KAElBV,EArEoB0B,CAAehB,OAEtCiB,EAAiC,IAClBjB,EAAU,QACjBc,OACSd,EAAU,OAcvC,SAA4BkB,EAAaD,EAA+BE,EAAqBC,OACrFC,EAAM,IAAIC,eAEdD,EAAIE,mBAAqB,cACE,IAAnBF,EAAIG,eAEU,KAAdH,EAAII,QAA+B,KAAdJ,EAAII,OAKxB,CAAA,GAAkB,KAAdJ,EAAII,QAA+B,KAAdJ,EAAII,OAAe,CACzCC,EAAMC,KAAKC,MAAMP,EAAIQ,oBACnB,IAAId,MAAMW,EAAII,KAAO,KAAOJ,EAAIK,QAAU,WAAad,GAG7De,WAAW,IAEPN,EAAMC,KAAKC,MAAMP,EAAIQ,oBACnB,IAAId,MAAMW,EAAII,KAAO,KAAOJ,EAAIK,QAAU,WAAad,OAZzDS,EAAMC,KAAKC,MAAMP,EAAIQ,cACP,mBAAPT,GACPA,EAAGM,SAcXO,EAUR,SAA0BhB,SAChBiB,EAAM,OACR,IAAIC,KAAOlB,EAAK,KACZmB,EAAQnB,EAAKkB,GACjBD,EAAIG,KAAKC,mBAAmBH,GAAO,IAAMG,mBAAmBF,WAEzDF,EAAIK,KAAK,KAhBLC,CAAiBvB,GAE5BI,EAAIoB,KAAKtB,EAAYuB,cAAexB,GACpCG,EAAIsB,iBAAkB,EACtBtB,EAAIuB,iBAAiB,eAAgB,qCAErCvB,EAAIwB,KAAKZ,GAtCLa,CAFU,8CAAgDzD,EAAgB,iBAElD4B,EAAM,QAAQ,SAAS8B,GAC3Cf,WAAW,QACce,EAAW,SAEpCnC,SAtBMoC,CAAoBhD,IAVpBiD,CAAazC,EAAYR,uBAGzB,IAAIe,MAAM,cAAgBR,EAAa"}